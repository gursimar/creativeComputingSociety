
arm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000044  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012c  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d6  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019b  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b4  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  8a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPWM>:
   PWM Output  = Non Inverted

   */


   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  92:	83 b7       	in	r24, 0x33	; 51
  94:	89 66       	ori	r24, 0x69	; 105
  96:	83 bf       	out	0x33, r24	; 51

   //Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32

   DDRB|=(1<<PB3);
  98:	bb 9a       	sbi	0x17, 3	; 23
}
  9a:	08 95       	ret

0000009c <SetPWMOutput>:
This can be used to control the brightness of LED or Speed of Motor.
*********************************************************************/

void SetPWMOutput(uint8_t duty)
{
   OCR0=duty;
  9c:	8c bf       	out	0x3c, r24	; 60
}
  9e:	08 95       	ret

000000a0 <initADC>:

void initADC()
{
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	87 60       	ori	r24, 0x07	; 7
  a4:	86 b9       	out	0x06, r24	; 6

   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  a6:	3e 9a       	sbi	0x07, 6	; 7
   ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
  a8:	3d 9a       	sbi	0x07, 5	; 7

   	// No MUX values needed to be changed to use ADC0 

	//   ADCSRA |= (1 << ADATE);  // Set ADC auto trigger enable
   ADCSRA |= (1 << ADEN);  // Enable ADC 
  aa:	37 9a       	sbi	0x06, 7	; 6

	/* The ADSC bit is 1 when the conversion is going on and
	cleared by harware when done */
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  ac:	36 9a       	sbi	0x06, 6	; 6

}
  ae:	08 95       	ret

000000b0 <main>:


int main (void) 
{ 

   DDRD=0xFF;	//used as output pins
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	81 bb       	out	0x11, r24	; 17
   OCR0=duty;
}

void initADC()
{
   ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz 
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	86 b9       	out	0x06, r24	; 6

   ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  ba:	3e 9a       	sbi	0x07, 6	; 7
   ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 
  bc:	3d 9a       	sbi	0x07, 5	; 7

   	// No MUX values needed to be changed to use ADC0 

	//   ADCSRA |= (1 << ADATE);  // Set ADC auto trigger enable
   ADCSRA |= (1 << ADEN);  // Enable ADC 
  be:	37 9a       	sbi	0x06, 7	; 6

	/* The ADSC bit is 1 when the conversion is going on and
	cleared by harware when done */
   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  c0:	36 9a       	sbi	0x06, 6	; 6
   PWM Output  = Non Inverted

   */


   TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	89 66       	ori	r24, 0x69	; 105
  c6:	83 bf       	out	0x33, r24	; 51

   //Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32

   DDRB|=(1<<PB3);
  c8:	bb 9a       	sbi	0x17, 3	; 23
         PORTD = 0b00000010; // Turn on LED1 
	  }

	  else 
	  {
         PORTD = 0b00001000; // Turn on LED1 
  ca:	38 e0       	ldi	r19, 0x08	; 8
         PORTD = 0b00000001; // Turn on LED1 
      } 

	  else if(ADCH < 172)
	  {
         PORTD = 0b00000010; // Turn on LED1 
  cc:	22 e0       	ldi	r18, 0x02	; 2
	
	  while((ADCSRA&(1<<ADSC))==1);

	  if(ADCH < 86) 
      { 
         PORTD = 0b00000001; // Turn on LED1 
  ce:	91 e0       	ldi	r25, 0x01	; 1

   for(;;)  // Loop Forever 
   { 

	//start conversion...
	   ADCSRA |= (1 << ADSC);  // Start A2D Conversions 
  d0:	36 9a       	sbi	0x06, 6	; 6
	
	  while((ADCSRA&(1<<ADSC))==1);
  d2:	86 b1       	in	r24, 0x06	; 6

	  if(ADCH < 86) 
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	86 35       	cpi	r24, 0x56	; 86
  d8:	10 f4       	brcc	.+4      	; 0xde <main+0x2e>
      { 
         PORTD = 0b00000001; // Turn on LED1 
  da:	92 bb       	out	0x12, r25	; 18
  dc:	06 c0       	rjmp	.+12     	; 0xea <main+0x3a>
      } 

	  else if(ADCH < 172)
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8c 3a       	cpi	r24, 0xAC	; 172
  e2:	10 f4       	brcc	.+4      	; 0xe8 <main+0x38>
	  {
         PORTD = 0b00000010; // Turn on LED1 
  e4:	22 bb       	out	0x12, r18	; 18
  e6:	01 c0       	rjmp	.+2      	; 0xea <main+0x3a>
	  }

	  else 
	  {
         PORTD = 0b00001000; // Turn on LED1 
  e8:	32 bb       	out	0x12, r19	; 18
	  	
	  }

		brightness = ADCH;
  ea:	85 b1       	in	r24, 0x05	; 5
This can be used to control the brightness of LED or Speed of Motor.
*********************************************************************/

void SetPWMOutput(uint8_t duty)
{
   OCR0=duty;
  ec:	8c bf       	out	0x3c, r24	; 60
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <main+0x20>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>

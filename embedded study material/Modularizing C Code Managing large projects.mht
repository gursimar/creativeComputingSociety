From: "Saved by Windows Internet Explorer 8"
Subject: AVR Freaks :: View topic - [TUT] Modularizing C Code: Managing large projects
Date: Thu, 10 Jun 2010 14:28:41 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_00D9_01CB08A9.394C0650"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16385

This is a multi-part message in MIME format.

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.avrfreaks.net/index.php?name=PNphpBB2&file=printview&t=48535&start=0

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" =
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" --><HTML=20
dir=3Dltr><HEAD><TITLE>AVR Freaks :: View topic - [TUT] Modularizing C =
Code: Managing large projects</TITLE>
<META content=3D"text/html; charset=3Dutf-8" http-equiv=3DContent-Type>
<META content=3Dtext/css http-equiv=3DContent-Style-Type>
<STYLE type=3Dtext/css>BODY {
	FONT-FAMILY: Verdana, Arial, Helvetica, sans-serif; LETTER-SPACING: =
1px; FONT-SIZE: 12px
}
.code {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
FONT-SIZE: 11px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black 1px =
solid
}
.quote {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
FONT-SIZE: 11px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black 1px =
solid
}
.php {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
FONT-SIZE: 11px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black 1px =
solid
}
.Forum {
	FONT-SIZE: 18px; FONT-WEIGHT: bold
}
.Topic {
	FONT-SIZE: 14px; FONT-WEIGHT: bold
}
.genmed {
	FONT-SIZE: 12px
}
HR.sep {
	BORDER-BOTTOM: #d1d7dc 0px solid; BORDER-LEFT: #d1d7dc 0px solid; =
HEIGHT: 0px; BORDER-TOP: #d1d7dc 1px solid; BORDER-RIGHT: #d1d7dc 0px =
solid
}
</STYLE>

<META name=3DGENERATOR content=3D"MSHTML 8.00.7600.16490"></HEAD>
<BODY><SPAN class=3DForum>
<DIV align=3Dcenter>AVR Freaks</DIV></SPAN><BR><SPAN class=3DTopic>AVR =
Tutorials -=20
[TUT] Modularizing C Code: Managing large projects</SPAN><BR>
<HR>
<B>abcminiuser</B> - Apr 09, 2007 - 07:42 PM<BR><B>Post subject: =
</B>[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 <SPAN style=3D"LINE-HEIGHT: normal; FONT-SIZE: 18px"><SPAN=20
style=3D"FONT-WEIGHT: bold"><SPAN style=3D"COLOR: darkred">Modularizing =
C Code:=20
Managing large projects</SPAN></SPAN></SPAN> <BR><BR><BR>Hi Freaks! Time =
for=20
another half-baked tutorial! This one will focus on how to split up your =
C=20
projects into manageable files (modules). It's by no means definitive, =
and=20
serves as only a guide. <BR><BR><BR><BR><BR><BR>There comes a time when =
a=20
project has outgrown the scope of a single file. Perhaps it's the point =
at with=20
you need to add more RAM to your computer just to open your project, or =
when you=20
realize you've just spent 45 minutes tracking down the timeout function =
you=20
swore you wrote two weeks ago. Whatever the reason, it's time to split =
your=20
project up into several manageable files, which you can then keep better =
track=20
of. This tutorial will give several pointers about the intricacies of =
how to=20
accomplish such a task. <BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: =
bold">Step one=20
- identify common routines</SPAN> <BR><BR>First of all, it makes sense =
to group=20
all the common routines into their own files - eg. one for USART =
management, one=20
for your protocol layer handler, one for your main code. You should =
determine=20
which functions can be moved into a separate files while still retaining =
some=20
connection with one another. Let's take the following example of =
routines:=20
<BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>GetUSARTByte() <BR>TurnOnStatusLed() =
<BR>SetupSpeaker()=20
<BR>TurnOffStatusLed() <BR>SetupUSART() <BR>main() =
<BR>CheckTempSensorVal()=20
<BR>ProcessByte() <BR>Beep() <BR>EnableUSART() <BR>SleepMode()=20
<BR>CheckADCChanel() </DIV><BR><BR>We can split these routines up into =
several=20
small files - one for the USART, one for the main (and misc) routines, =
one for=20
the speaker and one for the ADC (and related processing). <BR><BR>Let's =
take a=20
look at our proposed new structure: <BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">USART.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>SetupUSART() <BR>EnableUSART() =
<BR>GetUSARTByte()=20
<BR>ProcessByte() </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Speaker.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>SetupSpeaker() <BR>Beep() </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">ADC.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>CheckADCChanel() <BR>CheckTempSensorVal()=20
</DIV><BR><BR><SPAN style=3D"FONT-STYLE: italic">Main.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>main() <BR>SleepMode() <BR>TurnOnStatusLed()=20
<BR>TurnOffStatusLed() </DIV><BR><BR>Ok, looks pretty good! We'll cut =
and paste=20
those routines into the appropriate files in the same project directory, =
so now=20
we have a bunch of C files containing related functions. =
<BR><BR><BR><BR><SPAN=20
style=3D"FONT-WEIGHT: bold">Adding the new files to your makefile</SPAN> =

<BR><BR>Even though you've made no functional changes to your code =
outside=20
moving certain routines to a different file, you still need to tell the=20
compiler, linker and associated GCC tools where everything is now =
located. Open=20
up your makefile, and you should find some lines similar to the =
following (if=20
your makefile is based off the WinAVR template): <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent># List C source files here. (C dependencies are =

automatically generated.) <BR><BR>SRC =3D $(TARGET).c </DIV><BR><BR>What =
we now=20
need to do is add the file names of the newly created files. We'll take =
our=20
above example here again for consistency. Our new extra files are called =

"ADC.c", "Speaker.c" and "USART.c", so we need to add those to the SRC =
line of=20
the makefile. <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent># List C source files here. (C dependencies are =

automatically generated.) <BR><BR>SRC =3D $(TARGET).c ADC.c USART.c =
Speaker.c=20
</DIV><BR><BR><BR>Now, that'll work, but it's a real pain for future =
expansion.=20
To make our life easier, we'll place the filenames on their own line in=20
alphabetical order. To indicate a line continuation in a makefile, we =
need to=20
place a "\" at the end of the continued lines: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent># List C source files here. (C dependencies are =

automatically generated.) <BR><BR>SRC =3D $(TARGET).c \ <BR>&nbsp; =
&nbsp; &nbsp;=20
ADC.c&nbsp; &nbsp; &nbsp; &nbsp;\ <BR>&nbsp; &nbsp; &nbsp; =
Speaker.c&nbsp;=20
&nbsp;\ <BR>&nbsp; &nbsp; &nbsp; USART.c </DIV><BR><BR>NB: Watch the =
file case!=20
To GCC and its related utilities, "MAIN.C" is <SPAN=20
style=3D"FONT-WEIGHT: bold">not</SPAN> the same as "Main.c". Make sure =
you put=20
down the file names in the exact same case as they appear inside =
explorer, or=20
you'll get build errors! <BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: =
bold">Naming=20
the routines</SPAN> <BR><BR>One problem with our multi-file setup =
remains;=20
routines are still hard to find across the files. One might easily =
identify the=20
file location of our mythical "CheckADCChanel()" routine, but what about =

"SleepMode()"? Obviously a naming convention becomes important. =
<BR><BR>Now,=20
this is where it gets tricky. There's really no set standard for =
function names,=20
and every one prefers something different. It is important to <SPAN=20
style=3D"FONT-STYLE: italic">choose which one you prefer</SPAN>, but it =
is ten=20
times more important to <SPAN style=3D"FONT-WEIGHT: bold">remain =
consistent</SPAN>=20
in your scheme across your entire project. <BR><BR>The first word, =
symbol or=20
acronym in your function name should indicate the file it is located in. =
For=20
example, all the ADC functions will have "ADC" at their start, and all =
the=20
speaker-related functions in Speaker.c would have "Speaker" at their =
start. You=20
can eliminate repetition in a name as it becomes self-explanatory what =
the=20
function is referring to due to the prefix - thus "CheckADCChanel()" =
would=20
become "ADCCheckChannel()" (or similar), rather than the superfluous=20
"ADCCheckADCChanel()". <BR><BR>I'll use our example again and put here a =

possible function naming scheme. Note that the "main()" function's name =
remains=20
unchanged as it is mandated by the C standard: <BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">USART.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>USARTSetup() <BR>USARTEnable() =
<BR>USARTGetByte()=20
<BR>USARTProcessByte() </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Speaker.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>SpeakerSetup() <BR>SpeakerBeep() =
</DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">ADC.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>ADCCheckChanel() <BR>ADCCheckTempSensorVal()=20
</DIV><BR><BR><SPAN style=3D"FONT-STYLE: italic">Main.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>main() <BR>MainSleepMode() =
<BR>MainTurnOnStatusLed()=20
<BR>MainTurnOffStatusLed() </DIV><BR><BR>This new scheme makes finding =
the=20
location of a routine quick and easy, without the need for a multi-file =
search=20
utility. Don't forget to change the function prototypes in your header =
file to=20
the match your new function names! <BR><BR><BR><BR><SPAN=20
style=3D"FONT-WEIGHT: bold">Making functions static</SPAN> =
<BR><BR>Static=20
functions is possibly something you've never heard of up to now. The =
process of=20
declaring a function to be static indicates to the compiler that its =
scope is=20
limited to the source file in which it is contained - in essence it =
makes the=20
function private, only accessible by other function in the same C file. =
This is=20
good practice from two standpoints; one, it prevents outside code from =
calling=20
module-internal functions (and reduces the number of functions exposed =
by the=20
file) and two, it gives the compiler a better chance to optimize the =
function in=20
a better way that if it was assumed to be able to be called by any other =
source=20
file. <BR><BR>Identify which of your functions are module-internal, and =
add in=20
the static keyword. In our example, let's say that the "USARTEnable()" =
function=20
was only called by "USARTSetup()", and never by any other source file. =
Assume=20
that the USARTEnable function is declared as the following: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>void USARTSetup(void) </DIV><BR><BR>We'll make =
the=20
function static to reduce its scope to inside USART.c: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>static void USARTEnable(void) =
</DIV><BR><BR><BR>Note that=20
the static keyword should be added to both the prototype in the header =
file, as=20
well as to the function in the C source file. <BR><BR><BR><BR><SPAN=20
style=3D"FONT-WEIGHT: bold">Global variables</SPAN> <BR><BR>Your project =
probably=20
has quite a few global variables declared at the top of your main source =
file.=20
You need to cut-and-paste them each into the <SPAN=20
style=3D"FONT-STYLE: italic">most appropriate</SPAN> source file. Don't =
worry if=20
it's referenced by more than one file; dealing with that case will be =
handled=20
later in the tutorial. For now, just put it in the C file you deem to be =
the=20
best for it. <BR><BR>Just in case you've done this, remember the =
following=20
golden rule: <SPAN style=3D"FONT-WEIGHT: bold">header files should =
declare, not=20
define</SPAN>. A header file should not itself result directly in =
generated code=20
- it is there to help the compiler and yourself link together your C =
code,=20
located in C files. If you've put any globals inside your header file, =
move them=20
out now. <BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: bold">Splitting the =
header=20
file</SPAN> <BR><BR>This is where the hard part begins. So far we've=20
successfully split up the contents of our project into several C files, =
but=20
we're still stuck with one large header file containing all our =
definitions. We=20
need to break our header file up into separate files for each of our C =
modules.=20
<BR><BR>First, we'll create a bunch of .h header files of the same names =
as our=20
.c files. Next, we'll move the obvious things from the master header =
file, the=20
function prototypes. Copy each of the prototypes into the respective =
header=20
files. <BR><BR>Next, the macros. Again, move the macros into the header =
file=20
where they are used the most. If you have any generic macros that are =
used in=20
the majority of your source files, create a new "GlobalDefinitions.h" =
header=20
file and place them there. Do the same for any typedefs you may have in =
your=20
header file. <BR><BR>Let's assume our above example has the following =
original=20
header file: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#define StatusLedRed&nbsp; &nbsp; &nbsp;(1 =
&lt;&lt; 3)=20
<BR>#define StatusLedGreen&nbsp; &nbsp; &nbsp;(1 &lt;&lt; 2) <BR>#define =

ADCTempSensChannel 5 <BR>#define BitMask(x) (1 &lt;&lt; x) =
<BR><BR>typedef=20
unsigned char USARTByte; <BR><BR>USARTByte GetUSARTByte(void); =
<BR>void&nbsp;=20
&nbsp; &nbsp; TurnOnStatusLed(void); <BR>void&nbsp; &nbsp; &nbsp;=20
SetupSpeaker(void); <BR>void&nbsp; &nbsp; &nbsp; TurnOffStatusLed(void); =

<BR>void&nbsp; &nbsp; &nbsp; SetupUSART(void); <BR>int&nbsp; &nbsp; =
&nbsp;=20
&nbsp;main(void); <BR>int&nbsp; &nbsp; &nbsp; =
&nbsp;CheckTempSensorVal(void);=20
<BR>void&nbsp; &nbsp; &nbsp; ProcessByte(USARTByte); <BR>void&nbsp; =
&nbsp;=20
&nbsp; Beep(void); <BR>void&nbsp; &nbsp; &nbsp; EnableUSART(void);=20
<BR>void&nbsp; &nbsp; &nbsp; SleepMode(void); <BR>int&nbsp; &nbsp; =
&nbsp;=20
&nbsp;CheckADCChanel(char); </DIV><BR><BR>We can split this into our new =
header=20
files like thus: <BR><BR><SPAN style=3D"FONT-STYLE: =
italic">USART.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>typedef unsigned char USARTByte; =
<BR><BR>void&nbsp;=20
&nbsp; &nbsp; &nbsp; USARTSetup(void) <BR>static void USARTEnable(void)=20
<BR>USARTByte&nbsp; &nbsp;USARTGetByte(void) <BR>void&nbsp; &nbsp; =
&nbsp; &nbsp;=20
USARTProcessByte(USARTByte) </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Speaker.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>void SpeakerSetup(void) <BR>void =
SpeakerBeep(void)=20
</DIV><BR><BR><SPAN style=3D"FONT-STYLE: italic">ADC.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#define ADCTempSensChannel 5 <BR><BR>int=20
ADCCheckChanel(char) <BR>int ADCCheckTempSensorVal(void) =
</DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Main.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#define StatusLedRed&nbsp; &nbsp; &nbsp;(1 =
&lt;&lt; 3)=20
<BR>#define StatusLedGreen&nbsp; &nbsp; &nbsp;(1 &lt;&lt; 2) <BR><BR>int =

main(void) <BR>void MainSleepMode(void) <BR>void =
MainTurnOnStatusLed(void)=20
<BR>void MainTurnOffStatusLed(void) </DIV><BR><BR>Pretty straightforward =
- using=20
our renamed functions, the job becomes easy. The only issue is the =
orphaned=20
macro "BitMask", which we'll assume is used by all the files. As =
discussed,=20
we'll place that into a separate header file called =
"GlobalDefinitions.h".=20
<BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: bold">Renaming the =
macros</SPAN>=20
<BR><BR>As with the function names, the macros should also be renamed to =

indicate where they are located. Again, use whatever convention you =
prefer.=20
<BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: bold">Global variables=20
revisited</SPAN> <BR><BR>Now comes the time to fix up those global =
variable=20
references from before. You're faced with a problem; your global =
variable is=20
declared in one file, but it's used in two or more. How do you tell the =
other=20
files to use the declaration you already made? <BR><BR>The answer is the =
use of=20
the "extern" keyword. This keyword indicates to the compiler that a =
global of=20
the specified name and type has been declared elsewhere, and so the =
references=20
are fixed up by the linker when the project is built. Inside the header =
file of=20
the C module containing the global, add the same line of code (sans any=20
initialization value) but add the extern keyword. Say we have the =
following:=20
<BR><BR><SPAN style=3D"FONT-STYLE: italic">USART.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>unsigned char LastCommand =3D 0x00; =
</DIV><BR><BR>We can=20
add a reference to the global in USART.h to make it visible in our other =
C=20
modules: <BR><BR><SPAN style=3D"FONT-STYLE: italic">USART.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>extern unsigned char LastCommand; =
</DIV><BR><BR><BR>Do=20
this for each of your global variables that are accessed in C files =
other than=20
the one in which it is contained. <BR><BR><BR><BR><SPAN=20
style=3D"FONT-WEIGHT: bold">Including the header files</SPAN> =
<BR><BR>Our final=20
task is to link our header files to the relevant C files. Firstly, each =
.c file=20
should include its own header file. In the C language, for header files =
located=20
in the project's current directory, we use quotes around the file names: =

<BR><BR><SPAN style=3D"FONT-STYLE: italic">USART.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "USART.h" </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Speaker.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "Speaker.h" </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">ADC.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "ADC.h" </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Main.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "Main.h" </DIV><BR><BR><BR>Next, we =
need to=20
include the library header files relevant to each C module. For example, =
our=20
"Main.c" and "Speaker.c" files both make use of the "avr/io.h" header =
files.=20
System headers should have angled brackets instead of quotes: =
<BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Speaker.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include &lt;avr/io.h&gt; </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Main.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include &lt;avr/io.h&gt; </DIV><BR><BR>Rinse =
and repeat=20
for each of the required system header files inside the header of each C =
module.=20
<BR><BR><BR>The last task of this step is to include the header files =
used by=20
each module. For example, if a function in Main.c calls a function in =
ADC.c, we=20
need our Main.h header file to include the ADC.h header file.=20
<BR><BR><BR><BR><SPAN style=3D"FONT-WEIGHT: bold">Final step - header =
file=20
protection</SPAN> <BR><BR>The last thing to do before our conversion is=20
complete, is to protect our header files from multiple inclusion. Take =
the=20
following example. Say that Main and ADC both refer to each other: =
<BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Main.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "ADC.h" </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">ADC.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "Main.h" </DIV><BR><BR>What happens =
when this is=20
compiled? The preprocessor will look at Main.h, then include ADC.h. =
However,=20
ADC.h includes Main.h, which again includes ADC.h, etc... <BR><BR>To =
guard=20
against this problem, we can use preprocessor defines. The following =
code=20
snippet is the basic protection setup: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef MAIN_H <BR>#define MAIN_H <BR><BR>// =
Header file=20
contents <BR><BR>#endif </DIV><BR><BR>This construct, when applied to =
each of=20
your header files, will protect against multiple inclusions. As each C =
file is=20
compiled, the associated header file is included, as well as any other=20
referenced header files (via includes in the C file's header file). As =
each=20
header is included, a check is performed to see if the header's unique =
token is=20
already defined, and if so the inclusion halts to prevent recursion. If =
the=20
token is not already defined, the preprocessor defines it and looks at =
the=20
remainder of the header file's contents. By giving each header file a =
different=20
token (typically the header's filename in ALL CAPS, and the period =
replaced by=20
an underscore), this system will prevent any preprocessor troubles.=20
<BR><BR>Let's take a final look at how our mythical C file's headers =
might look=20
like: <BR><BR><SPAN style=3D"FONT-STYLE: italic">USART.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef USART_H <BR>#define USART_H =
<BR><BR>typedef=20
unsigned char USARTByte; <BR><BR>void&nbsp; &nbsp; &nbsp; &nbsp;=20
USARTSetup(void) <BR>static void USARTEnable(void) <BR>USARTByte&nbsp;=20
&nbsp;USARTGetByte(void) <BR>void&nbsp; &nbsp; &nbsp; &nbsp;=20
USARTProcessByte(USARTByte) <BR><BR>extern unsigned char LastCommand;=20
<BR><BR>#endif </DIV><BR><BR><SPAN style=3D"FONT-STYLE: =
italic">Speaker.h</SPAN>=20
<BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef SPEAKER_H <BR>#define SPEAKER_H =
<BR><BR>void=20
SpeakerSetup(void) <BR>void SpeakerBeep(void) <BR><BR>#endif =
</DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">ADC.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef ADC_H <BR>#define ADC_H <BR><BR>#define =

ADC_TEMPSENSORCHANNEL 5 <BR><BR>int ADCCheckChanel(char) <BR>int=20
ADCCheckTempSensorVal(void) <BR><BR>#endif </DIV><BR><BR><SPAN=20
style=3D"FONT-STYLE: italic">Main.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef MAIN_H <BR>#define MAIN_H =
<BR><BR>#define=20
MAIN_STATLED_RED&nbsp; &nbsp; &nbsp;(1 &lt;&lt; 3) <BR>#define=20
MAIN_STATLED_GREEN&nbsp; &nbsp;(1 &lt;&lt; 2) <BR><BR>int&nbsp; =
main(void)=20
<BR>void MainSleepMode(void) <BR>void MainTurnOnStatusLed(void) <BR>void =

MainTurnOffStatusLed(void) <BR><BR>#endif </DIV><BR><BR><BR>Voila, we =
now have a=20
separated, maintainable project! <BR><BR><BR><BR><BR>I hope this =
tutorial is of=20
some use. Feel free to post your corrections, questions and comments as =
always.=20
Cheers all! <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>andrimar</B> - Apr 09, 2007 - 09:58 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Great tutorial. Just have to nitpick a little=20
<DIV class=3Dquotetitle>abcminiuser wrote:</DIV>
<DIV class=3Dquotecontent>Just in case you've done this, remember the =
following=20
golden rule: <SPAN style=3D"FONT-WEIGHT: bold">header files should =
define, not=20
declare</SPAN>. </DIV><BR>This should be the other way round. Hence=20
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>//Function Definition <BR><BR>return-type=20
function-name(argument definitions) <BR>{ <BR>&nbsp; &nbsp; local =
variable=20
definitions <BR>&nbsp; &nbsp; statements <BR>} <BR>//Goes in source file =

<BR><BR><BR>//Function Declaration <BR><BR>return-type =
function-name(argument=20
declarations); <BR><BR>//Goes in header file <BR></DIV><BR><BR>Also=20
<DIV class=3Dquotetitle>abcminiuser wrote:</DIV>
<DIV class=3Dquotecontent>Identify which of your functions are =
module-internal,=20
and add in the static keyword. In our example, let's say that the=20
"USARTEnable()" function was only called by "USARTSetup()", an never by =
any=20
other source file. Assume that the USARTEnable function is declared as =
the=20
following: </DIV>and then in the codesegments you declare USARTSetup to =
be=20
static. <BR><BR>Again great tutorial. <BR><BR>Regards <BR>-Andri Mar
<HR>
 <B>abcminiuser</B> - Apr 10, 2007 - 06:22 AM<BR><B>Post subject: =
</B>RE: [TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Thanks Andri, fixed both of those issues. Glad to hear you liked it! =
<BR><BR>-=20
Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>AllN</B> - Apr 10, 2007 - 01:50 PM<BR><B>Post subject: </B>RE: [TUT] =

Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Anyone who doesn=EF=BF=BDt know C will greatly benefit form your =
tutorial and the rest=20
of us wish we had a tut like this when we first started learning C. =
<BR>Very=20
well written and concise, great job! <BR>Keep up the good work. =
<BR>Cheers=20
<BR>John
<HR>
 <B>benedict</B> - Apr 11, 2007 - 02:29 AM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 I have to second John's statement. I'm going back through my code with =
tutorial=20
in-hand to see if there are areas where I can clean things up and make =
it more=20
readable. <BR><BR>I like the idea of using the .c filename as the prefix =
for=20
each of the routines inside that file. I know I don't do that 100% of =
the time,=20
but it's a nice convention and I plan on using it from now on. =
<BR><BR>Thanks=20
for the hard work, Dean! It's appreciated. <BR><BR>Tom
<HR>
 <B>abcminiuser</B> - Apr 11, 2007 - 09:05 AM<BR><B>Post subject: =
</B>RE: [TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Thanks for the comments John and Tom. This is why I write these =
tutorials!=20
<BR><BR>Tom: The function naming convention is up to you, but I DO =
strongly=20
suggest you follow one. Use whatever you think is best, but be =
consistent and do=20
make some reference to where the function is stored. <BR><BR>In my =
project, I=20
use {ABBR}_{FNAME}, where "{ABBR}" is an abbreviation - actually acronym =
- of=20
the file name. This means that a function "DoStuff" inside=20
"SomeAmazingCFunctions.c" would be named "SACF_DoStuff". Use whatever =
works for=20
you. <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>clawson</B> - Apr 11, 2007 - 04:31 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Dean, <BR><BR>Our coding standard contains an extension of your =
function naming=20
suggestion that others may find useful. Here's an excerpt from our =
standard:=20
<BR><BR><A class=3Dpostlink =
href=3D"http://www.ourcottage.plus.com/cs.html"=20
target=3D_blank>http://www.ourcottage.plus.com/cs.html</A>
<HR>
 <B>yyw794</B> - Jul 02, 2007 - 01:30 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 i place all my functions in my header files.only a main.c;then many =
header=20
files which contain the real codes.i think this is much more =
convenient,cleaner=20
and easier than your method.
<HR>
 <B>abcminiuser</B> - Jul 02, 2007 - 01:37 PM<BR><B>Post subject: =
</B>RE: [TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 Header files should NEVER directly output code when included - it's a =
bad idea=20
all round. You might end up with naming conflicts, duplicated functions, =
etc and=20
it's just a bad practice all round, just like including C files. Follow =
my guide=20
here and you'll have a manageable large project which follows basic =
standards=20
about multiple files. <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted =
Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>yyw794</B> - Jul 02, 2007 - 02:18 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 i can not see your meaning clearly.=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Header files should NEVER directly output =
code when=20
included <BR></DIV><BR>my project is so well now,just fine,working so=20
smooth,doing the thing what i want.
<HR>
 <B>clawson</B> - Jul 02, 2007 - 04:33 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 What happens when you want to #include the same .h file into two =
different .c=20
files? <BR><BR>Remember that, in general, each .c file in a project is =
passed to=20
the compiler and compiled in isolation. So if file1.c includes shared.h =
and that=20
shared.h actually generates any code or data then file1.o will include a =
copy.=20
Now you compile file2.c which also includes shared.h and the output =
file2.o ALSO=20
now has copies of the generated data and functions. Hopefully the linker =
will=20
recognise things as being identical but the chaces are you are going to =
get=20
"xxxx is mutiply defined" errors during the link. <BR><BR>Cliff =
<BR><BR>PS I was=20
about to point you towards an excellent tutorial about code modularity =
in the=20
Tutorial Forum that explains how to do this properly - THEN I realised I =
was=20
actually typing on the end of it! (obviously more caffeine needed here)
<HR>
 <B>Kartman</B> - Jul 04, 2007 - 11:03 AM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 yyw794 - just because it works, doesn't mean it is good! Feel free to =
do it=20
your way, but if anyone else has to work with your code, expect to hear =
some=20
complaints.
<HR>
 <B>yyw794</B> - Jul 06, 2007 - 09:57 AM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 last night i made it the same way as you mentioned above,but now the =
big=20
problem appears! avrstudio4.13 tell me that "gcc plug-in:Error:Object =
file not=20
found on the expected location ..."i have repaired my gcc and =
avrstudio4,but=20
there is no help.what the hell is happening???
<HR>
 <B>yyw794</B> - Jul 06, 2007 - 11:06 AM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 i make it ! i make it!! all of that is the nasty global variables.i =
fixed it=20
,and then ok
<HR>
 <B>ikletti</B> - Jul 06, 2007 - 08:47 PM<BR><B>Post subject: </B>RE: =
[TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
 For offline reference I've made a PDF file of Dean's tutorial and =
wanted to=20
share it, you can find it below. <BR><BR>Ingo
<HR>
 <B>xingpingli</B> - Jul 15, 2007 - 12:09 PM<BR><B>Post subject: =
</B>can't=20
download
<HR class=3Dsep>
 Thanks for the comments John and Tom. This is why I write these =
tutorials!
<HR>
 <B>daqq</B> - Jul 15, 2007 - 02:07 PM<BR><B>Post subject: </B>RE: can
<HR class=3Dsep>
 Great tutorial, although I have a few newb questions: <BR><BR>dean: I =
may be=20
wrong, but in all of the .h codes, in definitions like=20
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>void&nbsp; &nbsp; &nbsp; &nbsp; =
USARTSetup(void)=20
<BR>static void USARTEnable(void) <BR>USARTByte&nbsp; =
&nbsp;USARTGetByte(void)=20
<BR>void&nbsp; &nbsp; &nbsp; &nbsp; USARTProcessByte(USARTByte)=20
</DIV><BR><BR>you haven't used any ; dots. Is it supposed to be like =
that?=20
<BR><BR>Also, now I'm getting some error that there's a multiple =
definition of=20
one variable, although there's no multiple definition of the variable. =
<BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>adc.o: In function `__vector_21': =
<BR>../adc.c:4:=20
multiple definition of `adc_channel_being_read' <BR>main.o:../main.c:4: =
first=20
defined here <BR>make: *** [Sbot.elf] Error 1 <BR></DIV><BR>and there's =
no=20
definition of it outside that .h file <BR>[edit] Nothing. solved the =
problem.=20
Thanks for a lovely tutorial <BR><BR><BR>[edit] xingpingli: WTF?
<HR>
 <B>abcminiuser</B> - Jul 15, 2007 - 03:32 PM<BR><B>Post subject: =
</B>RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>dean: I may be wrong, but in all of the .h =
codes, in=20
definitions like <BR>Code: <BR>void USARTSetup(void) <BR>static void=20
USARTEnable(void) <BR>USARTByte USARTGetByte(void) <BR>void=20
USARTProcessByte(USARTByte) <BR><BR><BR>you haven't used any ; dots. Is =
it=20
supposed to be like that? <BR></DIV><BR><BR>Intentional. I wanted to =
improve=20
clarity by eliminating everything but the basics. I'm hoping the end =
reader=20
realizes that they should use real, legal C code in their projects.=20
<BR><BR><BR>Seconding the WTF on xingpingli. Did your reply get chopped =
off?=20
<BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>clawson</B> - Jul 15, 2007 - 08:19 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 David, <BR><BR>Sorry to be a pedant but you mean you are DECLARing and =
not=20
DEFINing adc_channel_being_read in the .h don't you? <BR><BR>IOW just =
ONE of=20
your .c files should contain the definition: <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>type adc_channel_being_read; </DIV><BR>while =
the shared=20
.h file should have the declaration: <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>extern type adc_channel_being_read; </DIV>
<HR>
<B>daqq</B> - Jul 15, 2007 - 11:02 PM<BR><B>Post subject: </B>RE: can
<HR class=3Dsep>
 cliff: <BR>It's OK now. I fortunately found it out. Never used this =
kind of=20
program structuring before. I've also had a problem, that the ADC part =
will be=20
trying to use some of the USART code. It gave me an unknown reference. =
Is=20
including the "usart.h" everywhere where it is needed the right way, or =
should=20
there be one file with all of the function prototypes?
<HR>
 <B>abcminiuser</B> - Jul 15, 2007 - 11:12 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Yes, the "right" way is to include all the required header files. If =
you've=20
structured your project as this tutorial teaches, including the header =
files=20
should do nothing more than expose typedefs, enums, macros, prototypes =
and=20
variable declarations - no code size penalty. If you *really* want, you =
can make=20
public and private headers for each file, with only the items that need =
to be=20
globally exposed in the public headers. <BR><BR>- Dean <IMG border=3D0=20
alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>mrono</B> - Jul 19, 2007 - 07:23 PM<BR><B>Post subject: </B>
<HR class=3Dsep>

<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>If you *really* want, you can make public =
and=20
private headers for each file, with only the items that need to be =
globally=20
exposed in the public headers. <BR></DIV><BR>I've sometimes wondered if =
I should=20
be doing this. But how would one keep the private header private? Simply =
not=20
mention it in documentation? Or add a big comment "Should only be =
included in=20
foo.c"? Splitting things that are only needed in one file to another =
file=20
'feels' wrong even though it would follow the rule that declarations go =
to=20
header files. <BR><BR>So I usually put declarations of static functions =
and=20
constants only needed in one place to the top of the corresponding .c =
file. I=20
would appreciate any advice or comments others may have on this.
<HR>
 <B>clawson</B> - Jul 19, 2007 - 07:36 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
In our large projects a module will generally have a three letter =
acronym (e.g.=20
SPI) and in the \spi directory there will be various spi???.c files, an =
spi.h=20
that is the "public" header file that may be #include'd by other modules =
or main=20
code in the project then any .h stuff that other modules don't need to =
see will=20
go into spii.h (the added i for "internal"). While the tla???.c files =
will=20
probably include tla.h and tlai.h, outside of that directory the C files =
will=20
only include tla.h (they may know that tlai.h exists but would never use =
it=20
directly) <BR><BR>Cliff
<HR>
 <B>Go4it</B> - Aug 14, 2007 - 01:01 AM<BR><B>Post subject: </B>RE: can
<HR class=3Dsep>
 Hi All, <BR>Again a great tutorial here. <BR>Where should I best store =
these=20
new source and header files in Winavr ? <BR>Where to configure the path =
to these=20
files ? <BR>Do I have to configere the path ones ? <BR>Or do I have to =
add=20
Header and Source files in the left <BR>column named "AVR GCC" in =
AvrStudio for=20
each new project that needs these files ? <BR>Thanks,
<HR>
 <B>abcminiuser</B> - Aug 14, 2007 - 05:09 AM<BR><B>Post subject: </B>
<HR class=3Dsep>
Hi Go4It, <BR><BR>Thanks for the compliment. <BR><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent>Where should I best store these new source and =
header=20
files in Winavr ? <BR>Where to configure the path to these files ? =
<BR>Do I have=20
to configere the path ones ? <BR>Or do I have to add Header and Source =
files in=20
the left <BR>column named "AVR GCC" in AvrStudio for each new project =
that needs=20
these files ? </DIV><BR><BR>I don't have much experience in using =
AVRStudio as a=20
GCC frontend, so the following is only what I believe to be the case. =
I'm sure=20
someone else will correct me if I get things wrong. <BR><BR>You should =
put your=20
source files in the same directory as your main project source file, to =
keep=20
things neat and ordered. You should then add them to the left AVRStudio =
source=20
file pane, to tell AVRStudio to compile and link them in with your main =
source=20
file. <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>ikletti</B> - Aug 14, 2007 - 02:58 PM<BR><B>Post subject: </B>
<HR class=3Dsep>

<DIV class=3Dquotetitle>abcminiuser wrote:</DIV>
<DIV class=3Dquotecontent><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent>Where should I best store these new source and =
header=20
files in Winavr ? <BR>Where to configure the path to these files ? =
<BR>Do I have=20
to configere the path ones ? <BR>Or do I have to add Header and Source =
files in=20
the left <BR>column named "AVR GCC" in AvrStudio for each new project =
that needs=20
these files ? </DIV><BR><BR>[...]You should put your source files in the =
same=20
directory as your main project source file, to keep things neat and =
ordered. You=20
should then add them to the left AVRStudio source file pane, to tell =
AVRStudio=20
to compile and link them in with your main source file. </DIV><BR>Right =
click on=20
'Source files' -&gt; 'Add existing source file(s)' to do this and add =
all .c=20
files. <BR><BR>Then add the #include statements for the corresponding .h =
files=20
on the top of your main source file. <BR><BR>Ingo
<HR>
 <B>farlane</B> - Sep 21, 2007 - 04:35 PM<BR><B>Post subject: </B>Re: =
RE: [TUT]=20
Modularizing C Code: Managing large projects
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>clawson wrote:</DIV>
<DIV class=3Dquotecontent>Dean, <BR><BR>Our coding standard contains an =
extension=20
of your function naming suggestion that others may find useful. Here's =
an=20
excerpt from our standard: <BR><BR><A class=3Dpostlink=20
href=3D"http://www.ourcottage.plus.com/cs.html"=20
target=3D_blank>http://www.ourcottage.plus.com/cs.html</A> =
</DIV><BR><BR><BR>quote=20
from your link: <BR><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Note: C doesn=EF=BF=BDt support the =
concept of a module=20
global, this naming convention allows the <BR>distinction between a =
system=20
global which would be used by other modules from a module <BR>global =
which=20
should not be accessed by other modules <BR></DIV><BR><BR>Isnt it so =
that making=20
a module level variable static means its global to module level and =
inaccessible=20
from other modules? <BR><BR>For that matter, not declaring the variable =
in the=20
modules header file will generate an 'undeclared ...' warning when it is =
used=20
from outside the module. And we always want zero warnings right? <IMG =
border=3D0=20
alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">
<HR>
 <B>farlane</B> - Sep 21, 2007 - 04:52 PM<BR><B>Post subject: </B>
<HR class=3Dsep>

<DIV class=3Dquotetitle>abcminiuser wrote:</DIV>
<DIV class=3Dquotecontent>If you *really* want, you can make public and =
private=20
headers for each file, with only the items that need to be globally =
exposed in=20
the public headers. <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">=20
</DIV><BR><BR>Private declarations belong in the source file itself, not =
in a=20
header. This is the only way of ensuring that no other module knows =
about the=20
private declarations.
<HR>
 <B>mrx23dot</B> - Mar 30, 2008 - 03:45 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Hi! <BR><BR>Can I make one big Common.h for all .c files? <BR>Common.h =
would=20
contain: <BR><BR>-#include &lt;io.h&gt; <BR>-all function's prototype,=20
<BR>-extern.. global vars (these are defined in the beginning of main.c) =

<BR><BR>Common.h would be included in every *.c file in the project. =
<BR>So=20
there will be multiple prototypes, global var declarations. <BR>But is =
this a=20
problem? <BR><BR>Thx
<HR>
 <B>abcminiuser</B> - Mar 30, 2008 - 04:30 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
You can do whatever you like and I can't do anything to stop you <IMG =
border=3D0=20
alt=3DWink=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.=
gif">.=20
<BR><BR>However, I'd recommend against it. Generally, it's considered =
good=20
practice to go with the normal one header per source file route. That =
way each=20
source file only includes what is needed, preventing multiple definition =

problems and speeding up compilation. <BR><BR>- Dean <IMG border=3D0=20
alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>JohanEkdahl</B> - Mar 30, 2008 - 06:05 PM<BR><B>Post subject: </B>
<HR class=3Dsep>

<DIV class=3Dquotetitle>mrx23dot wrote:</DIV>
<DIV class=3Dquotecontent><BR>But is this a problem? <BR></DIV><BR><BR>
<DIV class=3Dquotetitle>Dean wrote:</DIV>
<DIV class=3Dquotecontent><BR>[...]go with the normal one header per =
source file=20
route. That way each source file only includes what is needed, =
preventing=20
multiple definition problems and speeding up compilation. =
<BR></DIV><BR><BR>And=20
apart fromthose two (valid) points, ponder this: What happends when you =
want to=20
take one piece of the developed source code and use in another project. =
Example:=20
Some code to handle a "ring buffer" "on top" of the UART, or maybe some =
code to=20
handle a LCD display. If all your prototypes are in one big header file =
you now=20
have to copy the parts you want and paste them into another header file =
for the=20
new project. If you had a separate RingBuffer.h or LCD.h (to accompany =
your=20
RingBuffer.c or LCD.c) you'd just make a copy of the files to the new =
project.=20
<BR><BR>And after doing that for a while you get problems with those =
copies=20
drifting apart leading to eg. bugs fixed in one project being un-fixed =
in=20
another. You realise that you need those files stored in one master =
place. Every=20
time you fix a bug or make an enhancement you'd update the master files, =
test=20
them and then distribute them to all projects that are using them. =
<BR><BR>(And=20
after doing that for a while you'd stop distributing the sources to the=20
different projects and instead build librarys of precompiled code to =
distribute.=20
Or you might set up your own version control system, eg. Subversion and =
store=20
the files there...) <BR><BR>Anyhow, my point is - it's not only about =
compiler=20
efficiency and avoiding build errors. Its just as much about making code =
reuse=20
easy, efficient and less error-prone.
<HR>
 <B>clawson</B> - Mar 30, 2008 - 06:26 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
I don't have a .h file for every .c file but one .h file for every =
"module" that=20
may actually contain a number of .c files. So I might have ADC support =
in a=20
single adc.c with a corresponding adc.h but for something like a flash =
filing=20
system there could be 10 or more .c files and a single ffs.h
<HR>
 <B>dpaulsen</B> - May 05, 2008 - 10:49 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Awesome tutorial. Just what the doctor ordered. <BR><BR>Thanks Dean.
<HR>
 <B>volatile_AH</B> - Aug 25, 2008 - 06:31 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Guys, <BR><BR>I've been working on a project for uni and have been =
putting all=20
my code into the one .c file and the one .h file. <BR><BR>However, it =
was all=20
getting a bit messy, so I decided to try and break it all up into =
seperate .c=20
and .h files for ease of documentation. <BR><BR>However, I'm now getting =
an=20
issue when I try and compile. <BR>I get messages such as <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>../ISR.c:13: In function '__vector_6': =
<BR>../ISR.c:31:=20
error: 'distance_string' undeclared (first use in this function)=20
</DIV><BR><BR>'distance_string' is declared in another header file=20
(distance_measure.h) with the 'extern' keyword, so I don't understand =
why AVR=20
Studio isn't linking it correctly. Do I have to include =
distance_measure.h in=20
isr.h? Through reading Dean's tutorial it makes it sound like I only do =
this if=20
I am calling a function from another file. <BR><BR>Can anyone help me =
out with=20
some ideas to try? <BR>If I need to post the code I will, it's just that =
it's=20
all a bit messy at the moment <IMG border=3D0 alt=3DWink=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.=
gif">=20
<BR><BR>Thanks!
<HR>
 <B>davef</B> - Aug 25, 2008 - 06:51 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
You've got distance_measure.h included in ISR.c?
<HR>
 <B>dpaulsen</B> - Aug 26, 2008 - 12:18 AM<BR><B>Post subject: </B>
<HR class=3Dsep>
I would like to add a tip that will save you a lot of time in =
Programmers=20
Notepad. There is an easy way to prepend extern to long lists of =
declarations:=20
<BR><BR>1)Make a vertical list of the word "extern " (note the space =
character)=20
on the left margin using copy and paste <BR>2)Hold down the Alt key and =
click=20
and drag a box around the list you just made. The list should be =
selected now.=20
<BR>3)Cut <BR>4)Place the cursor at the beginning of the list of =
declarations=20
<BR>5)Paste <BR><BR>If you do this, PN should have prepended your =
declarations=20
with "extern ". I hope this is helpful to someone. <BR><BR>edit: I just =
figured=20
out that it works in AVR Studio also, only you have to continue holding =
Alt=20
until after you cut. And also you have to issue the cut command with the =
mouse=20
not the keyboard.
<HR>
 <B>JohanEkdahl</B> - Aug 26, 2008 - 01:28 AM<BR><B>Post subject: </B>
<HR class=3Dsep>

<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Do I have to include distance_measure.h in =
isr.h?=20
<BR></DIV><BR>Include it in isr.c, as hinted at by davef. <BR><BR>We see =

questions similar to this on and off here at 'freaks, and what you =
really need=20
to know to analyze the situation yourself (rather than us just giving a=20
cook-book recipe for resolving it) is that all includes are handled by =
the=20
preprocessor before the compiler proper starts looking at the source. =
Wherever=20
an #include is done, in that place the whole header file is inserted =
into the=20
source code (and nested includes work that way too). So when the =
compiler proper=20
starts working there are no #includes left in the "compilation unit".=20
<BR><BR>Now, in your ISR.c, on line 31, the declaration of =
distance_string must=20
aready have been seen by the compiler. <BR><BR>If you are really curious =
there=20
is a switch to the gcc compiler to produce a listing file which shows =
what the=20
compiler proper sees after the preprocessor has "mangled" the file. I =
don't=20
recall the syntax of the switch - go to the (avr-)gcc documentation if =
you=20
really want to try it out.
<HR>
 <B>volatile_AH</B> - Aug 26, 2008 - 06:42 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Thanks JohanEkdahl and davef for your replies. <BR><BR>However, now I =
have=20
another problem. <IMG border=3D0 alt=3DSad=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_sad.g=
if">=20
<BR><BR>I started getting alot more error messages saying things like: =
<BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>ISR.c: (.text+0x1a): undefined reference to=20
'distance_string' </DIV><BR><BR>and for other global variables. =
<BR><BR>I went=20
and removed the 'extern' keyword from all the global variables declared =
in the=20
different header files just to see what happened, and the error messages =
changed=20
to <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>&nbsp;... multiple definition of... =
</DIV><BR><BR>Now I=20
don't know why this is occurring either, because the variables are only =
declared=20
in ONE header file, and I have put <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>&nbsp;#ifndef DISTANCE_MEASURE_H <BR>#define=20
DISTANCE_MEASURE_H <BR>... <BR>#endif </DIV><BR><BR>in each of the =
header files.
<HR>
 <B>JohanEkdahl</B> - Aug 26, 2008 - 06:54 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
The "undefined reference to X" is probably because the source file that =
actually=20
defines (implements) X is not included in the project. While compiling, =
the=20
compiler only sees <BR><BR>extern type X <BR><BR>and goes "Oh, allright =
it is=20
somewhere, but I don't know where. Another instance of me the compiler =
will see=20
it while compiling some other source file, and we both will leave it to =
the=20
linker to resolve this." As that other file never is compiled the linker =
will=20
not see it and goes "Darn, here's a reference that I cannot resolve".=20
<BR><BR>When you remove all those extern from the declarations they all =
turn=20
into definitions (implementations) of X. Now every time the compiler =
sees one of=20
those it will emit code for it into the object file. And when the linker =
gets=20
hold a hold of thyose object files it has to emit an error becuse it =
sees the=20
same variable implemented several times. <BR><BR>The solution to the =
first=20
problem is not to delete all "extern" thingies, but to locate the source =
file=20
that actually implements X and see to it that it gets compiled and =
linked in.
<HR>
 <B>volatile_AH</B> - Aug 26, 2008 - 06:55 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Sorry when I say I've put <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef DISTANCE_MEASURE_H <BR>... =
</DIV><BR><BR>I mean=20
I've named them differently depending on the name of the header file =
(eg. ISR_H=20
for isr.h, etc etc etc)
<HR>
 <B>volatile_AH</B> - Sep 04, 2008 - 08:31 PM<BR><B>Post subject: </B>
<HR class=3Dsep>
Thanks to your help JohanEkdahl, and a bit of fiddling... I managed to =
get it to=20
all compile (and probably more important learned something along the way =
<IMG=20
border=3D0 alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif"> ).=20
<BR><BR>Now to start playing with this doxygen to get some some nice=20
documentation out of it...
<HR>
 <B>jay warren</B> - Sep 20, 2008 - 11:10 AM<BR><B>Post subject: </B>
<HR class=3Dsep>
Glad to be back here... <IMG border=3D0 alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">=20
<BR><BR>Im not sure if this may help but, one may also use function =
table in=20
declaring functions, specially those that almost have the same =
characteristics=20
(ie communication protocols that sends, receives data). <BR><BR>For =
example:=20
<BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent><BR>From Protocol.h <BR>#define INIT&nbsp; =
&nbsp;0=20
<BR>#define TXDATA 1 <BR>#define RXDATA 2 <BR><BR><BR>From Protocol.c =
<BR>void=20
(*Protocol[][Idx])() =3D <BR>{ <BR>#if defined (UART) <BR>&nbsp; &nbsp;=20
ProtocolInit[Idx] =3D UartInit(); <BR>&nbsp; &nbsp; ProtocolTxData[Idx] =
=3D=20
UartTxData(); <BR>&nbsp; &nbsp; ProtocolRxData[Idx] =3D UartRxData();=20
<BR><BR>#elif <BR>&nbsp; &nbsp; ProtocolInit[Idx] =3D SpiInit(); =
<BR>&nbsp; &nbsp;=20
ProtocolTxData[Idx] =3D SpiTxData(); <BR>&nbsp; &nbsp; =
ProtocolRxData[Idx] =3D=20
SpiRxData(); <BR>#endif <BR>} <BR></DIV><BR><BR>The Idx refers to the =
UART=20
channel. <BR><BR>From the calling function, one may only need to call =
<BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>Protocol[INIT][Idx] </DIV><BR><BR>if the UART =
or SPI=20
needs to be initialized, depending on the channel (Idx). If you are =
using 2=20
UART, you set Idx to either 0 or 1, depending on which UART you want to=20
initialize. <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>Protocol[TXDATA][Idx] </DIV><BR><BR>to transmit =
data,=20
<BR>and <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>Protocol[RXDATA][Idx] </DIV><BR><BR>to get the =
data.=20
<BR><BR>I haven't compiled this code yet so there might be some missing =
or=20
erroneous syntax. Please feel free to correct me. <BR><BR>Thanks. <IMG =
border=3D0=20
alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">=20
<BR><BR>Nice tutorial, dean.
<HR>
 <B>eel</B> - Nov 12, 2008 - 01:31 AM<BR><B>Post subject: </B>RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Header files should NEVER directly output =
code when=20
included <BR></DIV><BR><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>What happends when you want to take one =
piece of the=20
developed source code and use in another project. =
<BR></DIV><BR><BR>Indeed. How=20
does a statement like #include &lt;stdio.h&gt; allow you to use =
functions like=20
printf()? <BR><BR>Thanks, <BR><BR>-Stephen
<HR>
 <B>bojan.m</B> - Feb 17, 2009 - 11:00 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 Thanks for this very good tutorial! <IMG border=3D0 alt=3D"Very Happy"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_biggr=
in.gif">=20
<BR><BR>I'm just re-organising a large project, but I've got some =
problems with=20
global vars. <BR><BR>this is my situation: <BR>I've got several source =
files=20
with their headers <BR>main(.c .h) UART(.c.h) EEPROM(.c .h) ... <BR>I've =
got a=20
Constants.h with some defines that are used in the whole project and =
need to be=20
included everywhere, as th GlobalHeader.h where i put some type defs and =
library=20
includes. <BR><BR>1) those headers that go everywhere stay better in c =
files or=20
in every header? (i.e. changes something if I put Constants.h in main.c =
or=20
main.h etc...) <BR><BR>2) I've got a compilation error (undeclared =
variable) on=20
global vars. I've got some global (whole project) vars which I declared =
at the=20
beginning of the main.c as <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>uint8_t checkSend; </DIV><BR>and in the main.h =
as <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>extern uint8_t checkSend; </DIV><BR>now I got =
errors=20
compiling UART.c whic uses those global vars. Do I need to put the =
extern=20
uint8_t checkSend; in headers of every file wich uses this var? =
<BR><BR>Thanks,=20
<BR>-bo.
<HR>
 <B>clawson</B> - Feb 17, 2009 - 11:20 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 You should have a vars.h (or something) that documents the globally =
accessible=20
variables in main.c and #include this wherever one or more of those =
variables=20
need to be accessed. <BR><BR>It should only be necessary to have the =
extern=20
declaration of any particular variable definition in a .c file made in =
one .h=20
file - then #include that file where visibility is required. <BR><BR>If =
it were=20
me I think I'd #include main.h, uart.h and eeprom.h (perhaps also=20
&lt;avr/io.h&gt; etc) in globalheaders.h and then just #include that one =
file in=20
each .c file. <BR><BR>Cliff
<HR>
 <B>bojan.m</B> - Feb 17, 2009 - 11:34 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 ok, thanks! <BR>I'll include those vars as a sub section of the =
GlobalHeader.h,=20
which goes everywhere... <BR>bye, <BR>bo.
<HR>
 <B>damien_d</B> - Feb 28, 2009 - 11:28 AM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 A few other little hints along the same lines. <BR><BR>* Include as FEW =
header=20
files in other files as far as is possible for several reasons: =
<BR><BR>(1) You=20
can quickly tell what modules are **really** dependant on other modules. =

<BR><BR>(2) Compile time. OK, AVR compile time is relatively short, but =
wait=20
until you do a complex C++ project using lots and lots of template =
functions.=20
You'll definitely appreciate this rule then! <BR><BR>* Include the =
header files=20
in order of custom.h through to the standard libraries. You'll have less =

dependency problems when porting the sources to something else. =
<BR><BR>When=20
separating out functionality, I usually group related files in a =
directory. It=20
then makes it very easy to <SPAN style=3D"FONT-WEIGHT: =
bold">branch</SPAN> this=20
directory into another project and track/merge changes between the two =
of them.=20
See comments on a source control system below <IMG border=3D0 =
alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">=20
<BR><BR>And, not directly related to C programming (so I expect to get =
flamed),=20
but I strongly recommend the following: <BR><BR>(a) <SPAN=20
style=3D"FONT-WEIGHT: bold">Learn C++</SPAN>, or a reasonably =
close-to-metal=20
Object-oriented Language, even if it's for doing basic host-side work. =
My C code=20
(and even assembly!) is cleaner, more portable and far more maintainable =
after=20
learning an OO language and putting various practices in place. =
<BR><BR>(b)=20
There is no excuse whatsoever (and I really, really mean that) for not =
using a=20
<SPAN style=3D"FONT-WEIGHT: bold">version control system</SPAN>. Even if =
you're an=20
only-programmer or hobbyist on a project. One day, you'll break =
something and=20
wonder what you did to break it. <BR><BR>Subversion is free, open source =
and=20
cross-platform, both command line and graphical for Windows and *nix.=20
<BR><BR>(c) C99 includes nice features like <SPAN=20
style=3D"FONT-WEIGHT: bold">inline</SPAN>, <SPAN=20
style=3D"FONT-WEIGHT: bold">restrict</SPAN> and <SPAN=20
style=3D"FONT-WEIGHT: bold">const</SPAN> that, when used correctly, will =
make code=20
safer and faster in many scenarios.
<HR>
 <B>clawson</B> - Feb 28, 2009 - 06:03 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Subversion is free, open source and =
cross-platform,=20
both command line and graphical for Windows and *nix. =
<BR></DIV><BR>Agree and if=20
using Windows then Tortoise is a nice interface. But if you are in Linux =
also=20
consider Git which is the new pretender to the SVN crown (possibly =
because it=20
was written by Linus Torvalds with the needs of version managing the =
Linux=20
kernel in mind)
<HR>
 <B>frnando_2006</B> - Feb 28, 2009 - 06:38 PM<BR><B>Post subject: =
</B>RE: can
<HR class=3Dsep>
 Thanks for the great tutorial Dean!! <BR><BR>Very useful and clear!!
<HR>
 <B>JohanEkdahl</B> - Feb 28, 2009 - 07:32 PM<BR><B>Post subject: =
</B>RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent>But if you are in Linux also consider Git=20
<BR></DIV><BR>AFAIK Git is available on Windows also. <BR><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>consider Git which is the new pretender to =
the SVN=20
crown <BR></DIV><BR>I'd say that there is a troika of contenders: =
Bazaar, Git=20
and Mercurial. There are Windows Explorer-integrated GUIs available for =
all=20
three (TortoiseBzr, TortoiseGit and TortoiseHg).
<HR>
 <B>damien_d</B> - Mar 01, 2009 - 06:03 AM<BR><B>Post subject: </B>Re: =
RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>JohanEkdahl wrote:</DIV>
<DIV class=3Dquotecontent><BR><BR>I'd say that there is a troika of =
contenders:=20
Bazaar, Git and Mercurial. There are Windows Explorer-integrated GUIs =
available=20
for all three (TortoiseBzr, TortoiseGit and TortoiseHg). =
</DIV><BR><BR>We'll=20
leave the revision control wars for another thread <IMG border=3D0 =
alt=3DRazz=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_razz.=
gif">=20
<BR><BR>In the meantime, a good list can be found at <!-- m --><A=20
href=3D"http://en.wikipedia.org/wiki/List_of_revision_control_software"=20
target=3D_blank>http://en.wikipedia.org/wiki/List_of_revision_control_sof=
tware</A><!-- m -->
<HR>
 <B>cloudburst</B> - Apr 30, 2009 - 03:18 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 Is agreeing with the positive comments on this thread <BR><BR>-Jd from =
the land=20
of the Pacman
<HR>
 <B>derelectt</B> - Jul 31, 2009 - 02:15 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 Hi there guys <BR><BR>I have used this tutorial as a basis for =
splitting up my=20
code for larger projects, however my compiler (GCC) is grumpy and coming =
up with=20
the following warnings regarding the static function declarations: =
<BR><BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent>../SDCard.h:108: warning: 'SendCommand_SDC' =
declared=20
'static' but never defined <BR></DIV><BR><BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>//In .h file <BR>static BOOL =
SendCommand_SDC(uint8_t=20
uchCommand, uint32_t uiArgument, uint8_t *puchResponse); =
<BR></DIV><BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent><BR>//In .c file <BR>static BOOL =
SendCommand_SDC(uint8_t=20
uchCommand, uint32_t uiArgument, uint8_t *puchResponse) <BR>{ =
<BR>...code <BR>}=20
<BR></DIV><BR><BR>The function definition is definitely in the .c file =
with a=20
declaration in the .h file. <BR><BR>If need be I can include the full =
code,=20
however I get this with all of my static functions and do not think it =
is=20
necessary. <BR><BR>Does anyone know what this warning is about? I have =
searched=20
for a list of warnings, but have had little success. I obviously prefer =
to not=20
have any warnings, even if they are not hazardous to the codes =
execution.=20
<BR><BR>I would like to find out more about the compiler warnings, for =
future=20
reference, as in a complete list of warnings and there meanings. As well =
as a=20
work around for this problem. <BR><BR>Thank you in advance. =
<BR><BR>Regards,=20
<BR><BR>Derek
<HR>
 <B>JohanEkdahl</B> - Jul 31, 2009 - 02:27 PM<BR><B>Post subject: =
</B>RE: can
<HR class=3Dsep>
 I suppose you are including the header file into more than one source =
file, but=20
only define (implement) the static function in one of them. <BR><BR>If =
the=20
function is static, this means that it is only visible inside the source =
file=20
where it is defined, and thus it's function prototype needs not be in =
the header=20
file at all. For me the primary reason for header files is tha they are=20
"contracts" between proucers and consumers of eg functions. In your case =
the=20
producer and the consumer is the same source file, so the contract can =
be in=20
that file itself. <BR><BR>You can of-course place such a prototype in a =
header=20
file, but you will need a separate such heaer file for each source file =
that=20
declares static functions.
<HR>
 <B>clawson</B> - Jul 31, 2009 - 03:02 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 What we do for any given module TLA is to have both a tla.h which is =
Johan's=20
public "contract" and also a tlai.h (i=3Dinternal) which is a private =
header file=20
for information that only needs to be used amongst the components of the =
module.=20
However we wouldn't put a static function declaration into even the =
tlai.h. The=20
thole point of "static" is that they are private to the one .c file =
where they=20
are defined so if the function needs to be announced before it is used a =
simple=20
declaration would be made within the early sections of the .c
<HR>
 <B>derelectt</B> - Jul 31, 2009 - 09:05 PM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 Thanks - sounds good to me. The project now compiles and links with out =
any=20
errors. <BR><BR>Thank you again. <BR>D
<HR>
 <B>kwesoly</B> - Sep 07, 2009 - 07:07 AM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 spliting is very nice idea, as one said you'll especially benefit when =
using OO=20
languages. The disadvantage is that with separate compilations compiler =
has much=20
less oportunities to optimize program. For example (AFAIK) it doesn't =
inline=20
code compiled in other module, it pushes more registers then needed or =
just=20
leaves unused functions in generated header. Therefore after such =
spliting user=20
usually should be more compilator-aware - for example ISR that call =
function=20
should be in same module - function we'll be inlined, or at least only =
needed=20
registers we'll go to the stack.
<HR>
 <B>bsodmike</B> - Sep 10, 2009 - 04:00 AM<BR><B>Post subject: </B>RE: =
can
<HR class=3Dsep>
 This is the makefile I'm using with CrossPack for OS X: <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent># Name: Makefile <BR># Author: &lt;insert your =
name=20
here&gt; <BR># Copyright: &lt;insert your copyright message here&gt; =
<BR>#=20
License: &lt;insert your license reference here&gt; <BR><BR># This is a=20
prototype Makefile. Modify it according to your needs. <BR># You should =
at least=20
check the settings for <BR># DEVICE ....... The AVR device you compile =
for <BR>#=20
CLOCK ........ Target AVR clock rate in Hertz <BR># OBJECTS ...... The =
object=20
files created from your source files. This list is <BR>#&nbsp; &nbsp; =
&nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; usually the same as the list of =
source files=20
with suffix ".o". <BR># PROGRAMMER ... Options to avrdude which define =
the=20
hardware you use for <BR>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
&nbsp;=20
&nbsp; uploading to the AVR and the interface where this hardware =
<BR>#&nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; is connected. <BR># =
FUSES=20
........ Parameters for avrdude to flash the fuses appropriately.=20
<BR><BR>DEVICE&nbsp; &nbsp; &nbsp;=3D atmega8 <BR>CLOCK&nbsp; &nbsp; =
&nbsp; =3D=20
8000000 <BR>PROGRAMMER =3D -c stk500v2 -P /dev/tty.usbserial-A3000HDB=20
<BR>OBJECTS&nbsp; &nbsp; =3D main.o <BR>FUSES&nbsp; &nbsp; &nbsp; =3D -U =

hfuse:w:0xd9:m -U lfuse:w:0x24:m <BR># ATMega8 fuse bits (fuse bits for =
other=20
devices are different!): <BR># Example for 8 MHz internal oscillator =
<BR># Fuse=20
high byte: <BR># 0xd9 =3D 1 1 0 1&nbsp; &nbsp;1 0 0 1 &lt;-- BOOTRST =
(boot reset=20
vector at 0x0000) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; ^ ^ ^ ^&nbsp; &nbsp;^ =
^=20
^------ BOOTSZ0 <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | | | |&nbsp; &nbsp;| =
+--------=20
BOOTSZ1 <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | | | |&nbsp; &nbsp;+---------- =
EESAVE=20
(set to 0 to preserve EEPROM over chip erase) <BR>#&nbsp; &nbsp; &nbsp; =
&nbsp; |=20
| | +-------------- CKOPT (clock option, depends on oscillator type) =
<BR>#&nbsp;=20
&nbsp; &nbsp; &nbsp; | | +---------------- SPIEN (if set to 1, serial=20
programming is disabled) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | =
+------------------=20
WDTON (if set to 0, watchdog is always on) <BR>#&nbsp; &nbsp; &nbsp; =
&nbsp;=20
+-------------------- RSTDISBL (if set to 0, RESET pin is disabled) =
<BR># Fuse=20
low byte: <BR># 0x24 =3D 0 0 1 0&nbsp; &nbsp;0 1 0 0 <BR>#&nbsp; &nbsp; =
&nbsp;=20
&nbsp; ^ ^ \ /&nbsp; &nbsp;\--+--/ <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | =
|&nbsp;=20
|&nbsp; &nbsp; &nbsp; &nbsp;+------- CKSEL 3..0 (8M internal RC) =
<BR>#&nbsp;=20
&nbsp; &nbsp; &nbsp; | |&nbsp; +--------------- SUT 1..0 (slowly rising =
power)=20
<BR>#&nbsp; &nbsp; &nbsp; &nbsp; | +------------------ BODEN (if 0, =
brown-out=20
detector is enabled) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; =
+--------------------=20
BODLEVEL (if 0: 4V, if 1: 2.7V) <BR><BR># Example for 12 MHz external =
crystal:=20
<BR># Fuse high byte: <BR># 0xc9 =3D 1 1 0 0&nbsp; &nbsp;1 0 0 1 &lt;-- =
BOOTRST=20
(boot reset vector at 0x0000) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; ^ ^ ^ =
^&nbsp;=20
&nbsp;^ ^ ^------ BOOTSZ0 <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | | | |&nbsp; =
&nbsp;|=20
+-------- BOOTSZ1 <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | | | |&nbsp;=20
&nbsp;+---------- EESAVE (set to 0 to preserve EEPROM over chip erase)=20
<BR>#&nbsp; &nbsp; &nbsp; &nbsp; | | | +-------------- CKOPT (clock =
option,=20
depends on oscillator type) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | |=20
+---------------- SPIEN (if set to 1, serial programming is disabled)=20
<BR>#&nbsp; &nbsp; &nbsp; &nbsp; | +------------------ WDTON (if set to =
0,=20
watchdog is always on) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; =
+--------------------=20
RSTDISBL (if set to 0, RESET pin is disabled) <BR># Fuse low byte: <BR># =
0x9f =3D=20
1 0 0 1&nbsp; &nbsp;1 1 1 1 <BR>#&nbsp; &nbsp; &nbsp; &nbsp; ^ ^ \ =
/&nbsp;=20
&nbsp;\--+--/ <BR>#&nbsp; &nbsp; &nbsp; &nbsp; | |&nbsp; |&nbsp; &nbsp; =
&nbsp;=20
&nbsp;+------- CKSEL 3..0 (external &gt;8M crystal) <BR>#&nbsp; &nbsp; =
&nbsp;=20
&nbsp; | |&nbsp; +--------------- SUT 1..0 (crystal osc, BOD enabled)=20
<BR>#&nbsp; &nbsp; &nbsp; &nbsp; | +------------------ BODEN (if 0, =
brown-out=20
detector is enabled) <BR>#&nbsp; &nbsp; &nbsp; &nbsp; =
+--------------------=20
BODLEVEL (if 0: 4V, if 1: 2.7V) <BR><BR><BR># Tune the lines below only =
if you=20
know what you are doing: <BR><BR>AVRDUDE =3D avrdude $(PROGRAMMER) -p =
$(DEVICE)=20
<BR>COMPILE =3D avr-gcc -Wall -Os -DF_CPU=3D$(CLOCK) -mmcu=3D$(DEVICE) =
<BR><BR>#=20
symbolic targets: <BR>all:&nbsp; &nbsp;main.hex <BR><BR>.c.o: <BR>&nbsp; =

&nbsp;$(COMPILE) -c $&lt; -o $@ <BR><BR>.S.o: <BR>&nbsp; =
&nbsp;$(COMPILE) -x=20
assembler-with-cpp -c $&lt; -o $@ <BR># "-x assembler-with-cpp" should =
not be=20
necessary since this is the default <BR># file type for the .S (with =
capital S)=20
extension. However, upper case <BR># characters are not always preserved =
on=20
Windows. To ensure WinAVR <BR># compatibility define the file type =
manually.=20
<BR><BR>.c.s: <BR>&nbsp; &nbsp;$(COMPILE) -S $&lt; -o $@ =
<BR><BR>flash:&nbsp;=20
&nbsp;all <BR>&nbsp; &nbsp;$(AVRDUDE) -U flash:w:main.hex:i =
<BR><BR>fuse:=20
<BR>&nbsp; &nbsp;$(AVRDUDE) $(FUSES) <BR><BR># Xcode uses the Makefile =
targets=20
"", "clean" and "install" <BR>install: flash fuse <BR><BR># if you use a =

bootloader, change the command below appropriately: <BR>load: all =
<BR>&nbsp;=20
&nbsp;bootloadHID main.hex <BR><BR>clean: <BR>&nbsp; &nbsp;rm -f =
main.hex=20
main.elf $(OBJECTS) <BR><BR># file targets: <BR>main.elf: $(OBJECTS) =
<BR>&nbsp;=20
&nbsp;$(COMPILE) -o main.elf $(OBJECTS) <BR><BR>main.hex: main.elf =
<BR>&nbsp;=20
&nbsp;rm -f main.hex <BR>&nbsp; &nbsp;avr-objcopy -j .text -j .data -O =
ihex=20
main.elf main.hex <BR># If you have an EEPROM section, you must also =
create a=20
hex file for the <BR># EEPROM and add it to the "flash" target. =
<BR><BR>#=20
Targets for code debugging and analysis: <BR>disasm:&nbsp; =
&nbsp;main.elf=20
<BR>&nbsp; &nbsp;avr-objdump -d main.elf <BR><BR>cpp: <BR>&nbsp;=20
&nbsp;$(COMPILE) -E main.c <BR></DIV><BR>How can I edit this to allow =
adding=20
additional .c files? Right now, I have to do #include "uart.c" to get it =
to=20
work; which simply embeds said code in main.c rather than having the =
compiler=20
link it in. <BR><BR>Tried to see if the makefile could first make uart.o =
from=20
uart.c and then link uart.o and main.o to yield main.hex; not making =
much=20
progress in this as aspect though. <BR><BR>Thanks in advance for your =
advice=20
<IMG border=3D0 alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">
<HR>
 <B>JohanEkdahl</B> - Sep 10, 2009 - 04:26 AM<BR><B>Post subject: =
</B>RE: can
<HR class=3Dsep>
 The clue seems to be here <BR>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent># OBJECTS ...... The object files created from =
your=20
source files. This list is <BR>#&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
&nbsp; &nbsp;=20
&nbsp; usually the same as the list of source files with suffix ".o".=20
<BR></DIV><BR></DIV><BR>It's late, so I wont test it but you could try =
to add=20
the names of other object to be built to this variable. Eg if your =
project=20
consists of main.c and uart.c then <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>OBJECTS&nbsp; &nbsp; =3D main.o uart.o =
</DIV><BR><BR>You=20
will of-course also have to edit up a uart.h with the things (eg =
function=20
prototypes, extern declarations of "shared" variables etc) that needs to =
be seen=20
from both main.c and uart.c and #include that file in both main.c and =
uart.c .
<HR>
 <B>bsodmike</B> - Sep 10, 2009 - 04:47 AM<BR><B>Post subject: </B>Re: =
RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>JohanEkdahl wrote:</DIV>
<DIV class=3Dquotecontent>... <BR><BR>You will of-course also have to =
edit up a=20
uart.h with the things (eg function prototypes, extern declarations of =
"shared"=20
variables etc) that needs to be seen from both main.c and uart.c and =
#include=20
that file in both main.c and uart.c . </DIV><BR><BR>Thanks Johan! I did =
try=20
having uart.o in the OBJECT definition but I was getting this strange =
error:=20
<BR><BR><A class=3Dpostlink=20
href=3D"http://www.avrfreaks.net/index.php?name=3DPNphpBB2&amp;file=3Dvie=
wtopic&amp;t=3D62946&amp;start=3D0&amp;postdays=3D0&amp;postorder=3Dasc&a=
mp;highlight=3D"=20
target=3D_blank>expected '=3D', ',', ';', 'asm' or '__attribute__' =
before</A>=20
<BR><BR>The reason is that the 'uart.h' header needed the avr/io.h =
header to be=20
included. For the ref of others, here are my two files as they stand:=20
<BR><BR><SPAN style=3D"FONT-WEIGHT: bold">uart.h</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#ifndef USART_H <BR>#define USART_H =
<BR><BR>#include=20
&lt;stdint.h&gt; <BR>#include &lt;avr/io.h&gt; <BR><BR>uint8_t =
uart_putchar=20
(char data); <BR>uint8_t uart_getchar (void); <BR>void =
uart_putstring(char *s);=20
<BR><BR>#endif </DIV><BR><BR><SPAN style=3D"FONT-WEIGHT: =
bold">uart.c</SPAN> <BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include "uart.h" <BR><BR>uint8_t uart_putchar =
(char=20
data) <BR>{ <BR>&nbsp; &nbsp;while ( !( UCSRA &amp; (1&lt;&lt;UDRE)) ); =
// Wait=20
for empty transmit buffer&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
<BR>&nbsp;=20
&nbsp;UDR =3D data;&nbsp; // Putting data into the buffer, forces=20
transmission&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
&nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <BR>&nbsp; &nbsp;return =
0;=20
<BR>} <BR><BR>uint8_t uart_getchar (void) <BR>{ <BR>&nbsp; &nbsp;while ( =
!(UCSRA=20
&amp; (1&lt;&lt;RXC)) );&nbsp; // Wait for data to be received&nbsp; =
&nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; <BR>&nbsp; &nbsp;return (UDR);&nbsp; &nbsp; =
&nbsp;=20
&nbsp; // Return Data&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =
&nbsp;=20
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <BR>} <BR><BR>void =
uart_putstring(char *s)=20
<BR>{ <BR>&nbsp; &nbsp;while(*s) uart_putchar(*s++); <BR>&nbsp; &nbsp; =
<BR>}=20
</DIV><BR><BR>and the beginning of my main.c. It is possible that I =
could leave=20
out some of them. <BR><BR>
<DIV class=3Dcodetitle><B>Code:</B></DIV>
<DIV class=3Dcodecontent>#include &lt;stdio.h&gt; <BR>#include =
&lt;string.h&gt;=20
<BR>#include &lt;stdint.h&gt; <BR>#include &lt;avr/io.h&gt; <BR>#include =

&lt;avr/interrupt.h&gt; <BR>#include &lt;util/delay.h&gt; <BR>#include =
"uart.h"=20
</DIV>
<HR>
<B>clawson</B> - Sep 10, 2009 - 03:05 PM<BR><B>Post subject: </B>RE: Re: =
RE: can
<HR class=3Dsep>
 Personally, when there's a lot of common system headers included in =
each .c I'd=20
put the #includes in a syshdr.h and then just #include "syshdr.h" in =
each .c to=20
reduce the "noise". On the occasion that the interrupt header file =
changes from=20
&lt;avr/signal.h&gt; to &lt;avr/interrupt.h&gt; I'd then just need to =
make the=20
change in one place - not edit every .c where it is included.
<HR>
 <B>wek</B> - Sep 10, 2009 - 04:27 PM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>clawson wrote:</DIV>
<DIV class=3Dquotecontent>Personally, when there's a lot of common =
system headers=20
included in each .c I'd put the #includes in a syshdr.h and then just =
#include=20
"syshdr.h" in each .c to reduce the "noise". </DIV><BR>You might want to =
rename=20
it to syshdr.inc, perhaps, to stress the fact that it is *not* a =
*header* (i.e.=20
"interface description of a *.c") as such. <BR><BR>JW
<HR>
 <B>JohanEkdahl</B> - Sep 10, 2009 - 08:41 PM<BR><B>Post subject: =
</B>RE: Re:=20
RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>You might want to rename it to syshdr.inc, =
perhaps,=20
to stress the fact that it is *not* a *header* (i.e. "interface =
description of a=20
*.c") as such. <BR></DIV><BR>Perhaps. Perhaps not. The use of ".h" as =
the=20
extension even for nested includes is quite wide-spread. <BR><BR>AFAICR =
this is=20
the first time I see the notion of making the super-include-files have a =

filetype of ".inc". Is this a cultural thing, where eg U*ix people do =
it, and=20
others (eg MS) don't?
<HR>
 <B>clawson</B> - Sep 10, 2009 - 08:44 PM<BR><B>Post subject: </B>RE: =
Re: RE:=20
Re: RE: can
<HR class=3Dsep>
 In our coding standard it would most definitely be a .h, we do have the =
concept=20
of ".i" to but that's for the very specific purpose of a block of =
externally=20
generated const data that MUST only be #include'd in one .c file - the =
.i rather=20
than .h makes this clear to the casual reader.
<HR>
 <B>bsodmike</B> - Sep 10, 2009 - 09:36 PM<BR><B>Post subject: </B>Re: =
RE: Re:=20
RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>wek wrote:</DIV>
<DIV class=3Dquotecontent>
<DIV class=3Dquotetitle>clawson wrote:</DIV>
<DIV class=3Dquotecontent>Personally, when there's a lot of common =
system headers=20
included in each .c I'd put the #includes in a syshdr.h and then just =
#include=20
"syshdr.h" in each .c to reduce the "noise". </DIV><BR>You might want to =
rename=20
it to syshdr.inc, perhaps, to stress the fact that it is *not* a =
*header* (i.e.=20
"interface description of a *.c") as such. <BR><BR>JW =
</DIV><BR><BR>During my=20
C/C++ classes at Uni and even most books I have always seen the use of =
".h" and=20
never the use of ".inc".
<HR>
 <B>abcminiuser</B> - Sep 11, 2009 - 05:51 AM<BR><B>Post subject: =
</B>RE: Re:=20
RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>During my C/C++ classes at Uni and even =
most books I=20
have always seen the use of ".h" and never the use of ".inc".=20
<BR></DIV><BR><BR>Doesn't matter what extension you use on a file =
#include'd in=20
your code -- the preprocessor will process it just the same. That said,=20
personally I think it extremely poor form to use anything other than the =
.h=20
unless it's something very unusual, like a giant array of PCM audio data =
which=20
needs to be embedded. Even then, I'd make the embedding of resource =
files a=20
compile step, and not part of the actual code. <BR><BR>Each to his own, =
but=20
don't be surprised if you get fired for naming all your C header files=20
"Includes.jpg". <BR><BR>- Dean <IMG border=3D0 alt=3D"Twisted Evil"=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twist=
ed.gif">
<HR>
 <B>glitch</B> - Sep 11, 2009 - 06:22 AM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>JohanEkdahl wrote:</DIV>
<DIV class=3Dquotecontent>
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>You might want to rename it to syshdr.inc, =
perhaps,=20
to stress the fact that it is *not* a *header* (i.e. "interface =
description of a=20
*.c") as such. <BR></DIV><BR>Perhaps. Perhaps not. The use of ".h" as =
the=20
extension even for nested includes is quite wide-spread. <BR><BR>AFAICR =
this is=20
the first time I see the notion of making the super-include-files have a =

filetype of ".inc". Is this a cultural thing, where eg U*ix people do =
it, and=20
others (eg MS) don't? </DIV><BR><BR>It most definitely isn't a *nix =
thing. A=20
quick journey through the system headers in a linux install will reveal =
that=20
many are simply includes of other headers, usually architecture =
specific. I too=20
have never seen the suggestion to use an extension other than .h for =
this=20
purpose. Just because a file is used to consolidate common includes, =
does not=20
make it "not a header". <BR><BR>.inc from my experience is usually =
reserved for=20
includes in assembly projects. <BR><BR>But as Dean stated, the C =
compiler does=20
not care what the extension is. #include is simply a text insertion.
<HR>
 <B>wek</B> - Sep 11, 2009 - 01:47 PM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>Johann wrote:</DIV>
<DIV class=3Dquotecontent>The use of ".h" as the extension even for =
nested=20
includes is quite wide-spread. </DIV><BR>A poor practice, however =
widespread, is=20
still a poor practice. Replace "sub-optimal" for "poor" in the above if =
you find=20
it offensive. <BR>
<DIV class=3Dquotetitle>glitch wrote:</DIV>
<DIV class=3Dquotecontent>.inc from my experience is usually reserved =
for includes=20
in assembly projects. </DIV><BR>The choice of extension is arbitrary, =
but I=20
agree that defacto standards have to be respected. As you might have =
noticed, I=20
don't have that much of an experience with projects invoving C (I try to =
avoid=20
them, in fact, being a dedicated C-hater <IMG border=3D0 alt=3DWink=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.=
gif"> ).=20
Any other extension would do - fancy .hh? <BR><BR>
<DIV class=3Dquotetitle>glitch wrote:</DIV>
<DIV class=3Dquotecontent>But as Dean stated, the C compiler does not =
care what=20
the extension is. #include is simply a text insertion. </DIV>And that's =
the=20
problem. The C/*nix folks are not known for being meticulous to the =
detail, are=20
they. And, if they have chance to take a shortcut, they take it. So it's =
upon=20
the poor programmer to maintain a discipline, so that the gun won't fire =
in the=20
direction of the toes. <BR><BR>While it's very easy to implement literal =

inclusion, it's hard to do it in the proper way. So there's no =
enforcement of=20
binding the header to the actual source, nor of rejecting irrelevant =
information=20
from it. There is no syntactical distinction between "include your own =
header=20
for making sure it matches the body of module", "include a header of the =
module=20
to be able to link to its functions and variables", and "include an =
arbitrary=20
text - possibly a collection of headers". <BR><BR>And this is why it is =
hard to=20
explain to the novices the concept of headers. This thread is in a =
tutorial=20
section after all, isn't it. <BR><BR>Jan Waclawek
<HR>
 <B>clawson</B> - Sep 11, 2009 - 04:30 PM<BR><B>Post subject: </B>RE: =
Re: RE:=20
Re: RE: Re: RE: can
<HR class=3Dsep>
 Jan, <BR><BR>You may want to take a look at &lt;avr/io.h&gt; in =
AVR-LibC <IMG=20
border=3D0 alt=3DWink=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.=
gif">=20
<BR><BR>Even \Program Files\Microsoft Visual =
Studio\VC98\include\windows.h is=20
little more than a bunch of #include's <BR><BR>And, as has already been =
stated,=20
the technique is used a LOT in the Linux kernel tree. <BR><BR>It may not =
be=20
"good practice" but it's what C programmers have actually been doing in =
large=20
projects since time immemorial. In fact that includes me in large =
in-house=20
projects (one with 57,000 .c files) - some are "meta headers" that just =
group=20
the inclusion of a bunch of other headers. <BR><BR>Cliff
<HR>
 <B>wek</B> - Sep 11, 2009 - 05:40 PM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>clawson wrote:</DIV>
<DIV class=3Dquotecontent>You may want to take a look at =
&lt;avr/io.h&gt; in=20
AVR-LibC <IMG border=3D0 alt=3DWink=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.=
gif">=20
</DIV>Well, that might be a collection, but of what are not headers =
either. I=20
would assign them a .def <IMG border=3D0 alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">=20
OK, this is stretching the things a bit further than you traditionalists =
would=20
be willing to accept... <IMG border=3D0 alt=3DSmile=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile=
.gif">=20
<BR><BR>
<DIV class=3Dquotetitle>clawson wrote:</DIV>
<DIV class=3Dquotecontent>Even \Program Files\Microsoft Visual=20
Studio\VC98\include\windows.h is little more than a bunch of #include's=20
</DIV>Oh, are you trying to tell us that M$ sets the benchmark in good=20
programming practices? <IMG border=3D0 alt=3DRazz=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_razz.=
gif">=20
<BR><BR>Jan
<HR>
 <B>clawson</B> - Sep 11, 2009 - 07:23 PM<BR><B>Post subject: </B>RE: =
Re: RE:=20
Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent><BR>Oh, are you trying to tell us that M$ sets =
the=20
benchmark in good programming practices? <BR></DIV><BR>Well, yes, =
actually I do=20
believe that. While people decry Microsoft their own source code is very =
good=20
quality. The reason people call Windows "buggy" is that it does not =
isolate=20
driver code enough and when Tom, Dick or Harry get a copy of the DDK and =
write=20
their own webcam or scanner driver it has the ability to crash the =
kernel (in=20
fact the same is true of anything that is insmod/modprobe'd into the =
Linux=20
kernel too). The end user's experience is that "Windows has crashed" but =
more=20
often than not it's 3rd party driver code that has crashed. <BR><BR>In =
fact a=20
lot of the coding standard we adhere too is based on the writings of =
Steve=20
Maguire in Writing Solid Code: <BR><BR><!-- m --><A=20
href=3D"http://www.amazon.com/Writing-Solid-Code-Microsofts-Programming/d=
p/1556155514"=20
target=3D_blank>http://www.amazon.com/Writing-Solid-Code-Microsofts-Progr=
amming/dp/1556155514</A><!-- m -->=20
<BR><BR>He outlines the techniques that Microsoft use internally to =
avoid the=20
more obvious code faults. If you like it's a bit like a cut-down, less =
stringent=20
MISRA rule book. That is a very very good book and I highly recommend it =
to=20
anyone programming in C. While I've had office "purges" over the years =
and had=20
to discard a lot of books to make room, this remains one of the core =
books (like=20
K&amp;R, the Borland C reference and Charles Petzold on programming =
Windows)=20
that I'll retain for all time. <BR><BR>Cliff
<HR>
 <B>Koshchi</B> - Sep 11, 2009 - 11:22 PM<BR><B>Post subject: </B>RE: =
Re: RE:=20
Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
 I have never seen anyone who uses a .inc extension for included files =
in C. In=20
fact, the only variation I have ever really seen other than .h is to use =
no=20
extension at all (an older practice that has gone out of favor). So I'm =
not sure=20
how you can say in one breath that you should follow the de facto =
standard, but=20
in another say to throw the de facto standard out the window only to =
advocate=20
something else that virtually no one else does.
<HR>
 <B>wek</B> - Sep 12, 2009 - 01:49 AM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>Koshchi wrote:</DIV>
<DIV class=3Dquotecontent>So I'm not sure how you can say in one breath =
that you=20
should follow the de facto standard, but in another say to throw the de =
facto=20
standard out the window only to advocate something else that virtually =
no one=20
else does. </DIV><BR>Well, using an already "assigned" extension for a =
different=20
purpose would cause confusion; while using an already "unassigned" =
extension for=20
the non-interface headers would cause at worst a mild attention. =
<BR><BR>But of=20
course there's no point to push it beyond reason. There are many =
controversial=20
items in various coding standards to add one more. The thinking =
programmer=20
develops his own little variations anyway. <BR><BR>I rest the case. =
<BR><BR>JW=20
<BR><BR><BR>PS. I googled for "file name extension .i" and learned that =
it is=20
likely to be an INTERCALC file... <IMG border=3D0 alt=3DRazz=20
src=3D"http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_razz.=
gif">
<HR>
 <B>ArnoldB</B> - Sep 12, 2009 - 02:18 AM<BR><B>Post subject: </B>Re: =
RE: Re:=20
RE: Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>wek wrote:</DIV>
<DIV class=3Dquotecontent>There are many controversial items in various =
coding=20
standards to add one more. </DIV>This is not a controversial item, you =
are just=20
trying to make it into one, pulling arguments out of thin air. =
<BR><BR>You=20
seriously underestimate the value of established conventions and =
traditions. The=20
existence of a convention is a value as such, even if the convention is =
(in your=20
imagination) not optimal. You forgot that there isn't black and white =
only, but=20
that engineering is a string of compromises and most results are grey. =
You=20
forgot that it is usually a huge waste of time and money to do things =
perfect=20
(the 80/20 rule of thumb). Engineering is not about perfection.
<HR>
 <B>wek</B> - Sep 12, 2009 - 02:37 AM<BR><B>Post subject: </B>Re: RE: =
Re: RE:=20
Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle>ArnoldB wrote:</DIV>
<DIV class=3Dquotecontent>You forgot that there isn't black and white =
only, but=20
that engineering is a string of compromises and most results are grey. =
You=20
forgot that it is usually a huge waste of time and money to do things =
perfect=20
(the 80/20 rule of thumb). Engineering is not about perfection. =
</DIV><BR>[wek,=20
standing ashamed in the corner of the room, nodding quietly while =
concentrating=20
on his yet unshot toes, letting out a sob now and then...]
<HR>
 <B>Koshchi</B> - Sep 12, 2009 - 02:45 AM<BR><B>Post subject: </B>RE: =
Re: RE:=20
Re: RE: Re: RE: Re: RE: Re: RE: can
<HR class=3Dsep>
=20
<DIV class=3Dquotetitle><B>Quote:</B></DIV>
<DIV class=3Dquotecontent>Well, using an already "assigned" extension =
for a=20
different purpose would cause confusion; </DIV><BR>How is it a different =

purpose? #include is used to include other files, and that is what is =
being=20
done. There is nothing in the designation ".h" that implies what the =
content of=20
the file is other than that it is intended to be included by other =
files.
<HR>
 <B>tissit</B> - Nov 03, 2009 - 02:13 AM<BR><B>Post subject: </B>RE: can
<HR class=3Dsep>
 There is a simple cure for case problems: Don't Capitalize! =
<BR><BR>main(),=20
printf(), int, static, avr/interrupt.h, _asm_, _delay_us... See the =
pattern?=20
Just say no. And in case you feel like a JavaRebel, ok, but at least be=20
consistent. <BR><BR>The exceptions are things already mentioned, =
constants,=20
macros, classes, header top ifdef's. F_CPU, DEBUG, DDRA, //FIXME, M_PI,=20
RAND_MAX... <BR><BR>A few outstanding conventions exist, like Makefile =
with a=20
capital M so it stands out from code and README(.txt) in all caps =
because that's=20
the first thing that should stand out at a glance.
<HR>
=20
<DIV align=3Dcenter>All times are GMT + 6 Hours<BR>Powered by <A=20
style=3D"TEXT-DECORATION: none" href=3D"http://www.pnphpbb.com/" =
target=3D_blank><FONT=20
color=3D#ff6600><B><I>PN</I></B></FONT><FONT=20
color=3D#0001f0><B>phpBB2</B></FONT></A>&nbsp;=C2=A9 2003-2006&nbsp;The =
PNphpBB=20
Group<BR><A=20
onclick=3D"window.open('./modules/PNphpBB2/docs/copyrite.html', =
'_pnphpbb2_credits', 'HEIGHT=3D250,WIDTH=3D450,scrollbars=3Dyes');return =
false;"=20
href=3D"http://www.avrfreaks.net/modules/PNphpBB2/docs/copyrite.html"=20
target=3D_pnphpbb2_credits>Credits</A> </DIV></BODY></HTML>

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_twisted.gif

R0lGODlhDwAPAMQRAEVFRf/qAAAAAP/OAP6dAP/9E/+0AP8AAP/////+k//JAP//x/4qAJaWljMz
M/5tA///6wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEA
ABEALAAAAAAPAA8AAAVrIABEpGiSkcmY0JIkgyo+RLEURaAPA/GINUBORwT0AA1AoiAg6pqx5C0g
aD6bCoJoKThUqV2BwrClHg7Es5gsvBK/Y9Eg4HASHdmRscrvx0o8AgiDgwJHKEYxfEZaKCUABpEG
WiOOiCaVKCEAOw==

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_smile.gif

R0lGODlhDwAPALMOAP/qAEVFRQAAAP/OAP/JAP+0AP6dAP/+k//9E///////xzMzM///6//lAAAA
AAAAACH5BAEAAA4ALAAAAAAPAA8AAARb0EkZap3YVabOGRcWcAgCnIMRTEEnCCfwpqt2mHEOagoO
nz+CKnADxoKFyiHHBBCSAdOiCVg8KwPZa7sVrgJZQWI8FhB2msGgwTXTWGqCXP4WBQr4wjDDstQm
EQA7

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_wink.gif

R0lGODlhDwAPALMMAP/qAEVFRQAAAP/OAP/JAP6dAP+0AP/+k//9E///x//lAP//6wAAAAAAAAAA
AAAAACH5BAEAAAwALAAAAAAPAA8AAARXkEkZap2Y1ZXOGRcWcAgCnEMRTEEnnDCQrtrxxjCoJSZw
+y+CKnDo/WAEQ+WAwyUrvWZQGRg0TwKFcFX1xYI6zWCgEJizhBlrTGi31aKAYW4YZlgW2iQCADs=

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_sad.gif

R0lGODlhDwAPALMMAP/qAEVFRQAAAP/OAP/JAP6dAP+0AP/+k//9E///x//lAP//6wAAAAAAAAAA
AAAAACH5BAEAAAwALAAAAAAPAA8AAARYkEkZap2Y1ZXOGRcWcAgCnEMRTEEnnLCQrtrxwjGoJSZw
+yeCKnDo/W4EQ+WAawKSlZ4zqAwMpieFcGU9Cb7fp04zGPwACpmKVSa43bNMxUA3DDMsC20SAQA7

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_biggrin.gif

R0lGODlhDwAPALMNAEVFRf/qAAAAAP/////OAP/JAP+0AP6dAP/+k//9E///x///6//lAAAAAAAA
AAAAACH5BAEAAA0ALAAAAAAPAA8AAARZsEkJap241aUQIhcGcEkSnMQBTEBnnnC6aogpwHcAasqb
B7mCCoD4wXCGSlHAbDqTANtgSh0IClACsEq9qjRaAfe6AxMYTvKXQiAU3m9ZpmKoG4YZlmU2iQAA
Ow==

------=_NextPart_000_00D9_01CB08A9.394C0650
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.avrfreaks.net/modules/PNphpBB2/images/smiles/icon_razz.gif

R0lGODlhDwAPALMOAP/qAEVFRQAAAP/OAP8AAP/JAP+0AP6dAP/9E//+k///x///6zMzM//lAAAA
AAAAACH5BAEAAA4ALAAAAAAPAA8AAARd0EkZap3Y1aVSGhcWcAgCnMMRTEEnCCfwpquWmHEOagoO
n7+CKnADxoKGSiLHBBSSAROjCWA8KwPZa7sVrgJZAWE8FhR2msGgESAHziqWutB+0zIVg94wzLAs
NRMRADs=

------=_NextPart_000_00D9_01CB08A9.394C0650--

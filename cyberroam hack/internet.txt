172.31.9.110
fac_chamb04


210391


route print
etsh int ip show config
netstat -r



others
nbtstat -  Verify the connection to a specific server
netstat -a  Verify remote connections
route print



route delete 0.0.0.0
route add 0.0.0.0 mask 0.0.0.0 172.31.9.1 metric 100
route add 192.168.0.0 mask 255.255.0.0 192.168.10.1 metric 1



Additional Routing Options

Earlier, I showed you the Route Print command, but there are actually a lot of other things that you can do with the ROUTE command. The ROUTE command’s syntax is as follows:

ROUTE [-f] [-p] [command [destination] []

The –f switch is optional. This switch tells Windows to clear the routing table of all gateway entries. If the –f switch is used in conjunction with other commands then all gateway entries will be cleared prior to executing other instructions within the command.

The –p switch makes a specified route persistent. Normally, when a server is rebooted then any routes that you specify via the ROUTE command are removed. The –p switch tells Windows to keep the route even if the system is rebooted.

The command portion of the ROUTE command’s syntax is relatively simple. The command set consists of four options PRINT, ADD, DELETE, and CHANGE. I’ve already shown you the ROUTE PRINT command, but even the ROUTE PRINT command has other options. For example, you can use wild cards with this command. For instance, if you only wanted to print routes pertaining to the 192.x.x.x subnet, you could use the command ROUTE PRINT 192*.

The ROUTE DELETE command works very similarly to the ROUTE Print command. Simply enter the ROUTE DELETE command followed by the destination or the gateway that you want to delete from the routing table. For example, if you wanted to remove the 192.0.0.0 gateway, you could enter the command ROUTE DELETE 192.0.0.0.

The ROUTE CHANGE and the ROUTE ADD commands have the same basic syntax as each other. When you enter this command, you must usually specify the destination, subnet mask, and gateway. You might also specify a metric and an interface, but that’s optional. For example, if you wanted to add a destination using the bare minimal syntax, you could do so as follows:

ROUTE ADD 147.0.0.0 255.0.0.0 148.100.100.100

In this command, 147.0.0.0 is the new destination that you are adding. 255.0.0.0 would be the subnet mask for the destination, and 148.100.100.100 would be the gateway address. You can extend the command with the METRIC and IF parameters. Doing so would look something like this:

ROUTE ADD 147.0.0.0 255.0.0.0 148.100.100.100 METRIC 1 IF 1

The metric parameter is optional, but it specifies the metric or number of hops for the route. The IF parameter tells Windows which NIC to use. In this particular case, Windows would use the NIC that’s bound to Windows as interface 1. If you don’t use the IF parameter then Windows will automatically search for the best interface to use.







Manipulate network routing tables. Route packets of network traffic from one subnet to another by modifying the route table.

Syntax

   Display route details:
      ROUTE [-f] PRINT [destination_host] [MASK subnet_mask_value] [gateway] 
         [METRIC metric] [IF interface_no.]

   Add a route:
      ROUTE [-f] [-p] ADD [destination_host] [MASK subnet_mask_value] [gateway] 
         [METRIC metric] [IF interface_no.]

   Change a route:
      ROUTE [-f] CHANGE [destination_host] [MASK subnet_mask_value] [gateway] 
         [METRIC metric] [IF interface_no.]

   Delete a route:
      ROUTE [-f] DELETE [destination_host] [MASK subnet_mask_value] [gateway] 
         [METRIC metric] [IF interface_no.] 

key
   -f          Clear (flush) the routing tables of all gateway entries.  If this is
               used in conjunction with one of the commands, the tables are
               cleared prior to running the command.

   destination_host
               The address (or set of addresses) that you want to reach.

   -p          Create a persistent route - survives system reboots.
               (not supported in Windows 95)

   subnet_mask_value
               The subnet mask value for this route entry.
               This defines how many addresses are there.
               If not specified, it defaults to 255.255.255.255.

   gateway     The gateway.

   interface   The interface number (1,2,...) for the specified route.
               If the option `IF interface_no` is not given, ROUTE will try
               to find the best interface available.

   metric      The metric, ie. cost for the destination.
Note that routes added to the table are not made persistent unless the -p switch is specified. Non-persistent routes only last until the computer is rebooted.

Symbolic names used for Destination_Host are looked up in the network database file NETWORKS. 

The symbolic names for gateway are looked up in the host name database file HOSTS. 

If the command is PRINT or DELETE. Destination or gateway can be a wildcard ('*'), or the gateway argument may be omitted. 

An IP address mask of 0.0.0.0 means everything. (rather like the *.* wildcard). In other words it says: When matching this pattern, don't worry about matching any of the bits - everything matches.

If Destination_Host contains a * or ?, it is treated as a shell pattern, and only matching destination routes are printed. The '*' matches any string, and '?' matches any one char. 
Examples:
157.*.1
157.*
127.*
*224* 

"Get your kicks on ROUTE 66" - Jack Kerouac.







ip route flush table main